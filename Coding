################################################################################
# Introduction to Data Science
# EDUC 423
# Project
# Luis Grochocki, Gabriela Gavrila, David Song
###################################################################


###############################################################################
# Extracting variable earnings from secondary dataset
################################################################################

###############################################################################
# Set up
################################################################################

setwd("/Users/grochocki/Data Science/Project")

library(tidyverse)
library(RColorBrewer)


###Opening/Merging files

#Creating multmerge function
multmerge = function(mypath){
  filenames=list.files(path=mypath, full.names=TRUE)
  datalist = lapply(filenames, function(x){read.csv(file=x,header=T,stringsAsFactors=FALSE)})
  Reduce(function(x,y) {merge(x,y, all=TRUE)}, datalist)
}

#Merging files (academic year 2012-2013) - period was selected based on most recent available data on earnings
scorecard <- multmerge("/Users/grochocki/Data Science/Project/college_scorecard_files")

#Selecting the variables which will allow to merge the variable earnings to other datasets

select_project <- select(scorecard,
                         UNITID,# Inst id
                         CITY,
                         MN_EARN_WNE_P6) #mean earning year 6


#########################################################################
# Excluding N/A and "PrivacySuppressed" rows for variable MN_EARN_WNE_P6
#########################################################################

cleanearnings1 <- select_project[select_project$MN_EARN_WNE_P6 != "NULL", ]
cleanearnings2 <- cleanearnings1[cleanearnings1$MN_EARN_WNE_P6 != "PrivacySuppressed", ]

#########################################################################
# Creating new variable with the average college earnings (MN_EARN_WNE_P6) 
# for the academic year of 2012-2013 by campus site (UNITID)
#########################################################################

cleanearnings2$MN_EARN_WNE_P6 = as.numeric(as.character(cleanearnings2$MN_EARN_WNE_P6))

mean_earnings <- cleanearnings2 %>% 
  group_by(UNITID) %>% 
  summarize(average_earnings = mean(MN_EARN_WNE_P6))


###############################################################################
# Merge with IPEDS database variables
################################################################################

#Opening ipeds dataset
ipeds <- read_csv("2016_ipeds.csv")

#Merging files (mean_earnings)
colleges <- mean_earnings %>%
  inner_join(ipeds, by = c("UNITID" = "UnitID"))

#saving new csv file with the variables we are going to work with
write.csv(colleges,'colleges.csv')

  
###############################################################################
# Renaming columns
################################################################################

colnames(colleges) <- c("UNITID",
                          "avrg_earnings",
                          "inst_name",
                          "zip",
                          "state",
                          "city",
                          "street",
                          "latitude",
                          "longitude",
                          "inst_type",
                          "land_grant",
                          "hbcu",
                          "grad_offer",
                          "med_degree",
                          "hospital",
                          "urban",
                          "suburban",
                          "town",
                          "rural",
                          "avrg_net_price",
                          "pct_f_aid",
                          "n_phd_degree",
                          "n_mast_degree",
                          "n_bach_degree",
                          "n_assoc_degree",
                          "inst_size",
                          "inst_sector",
                          "pct_admit",
                          "tot_admit",
                          "in_state_tuition_fees",
                          "out_state_tuition_fees",
                          "in_state_tuition",
                          "out_state_tuition",
                          "tuition_plans",
                          "in_state_tuition_fees_room",
                          "out_state_tuition_fees_room")

# Create new dummy variables (public, nonprofit and forprofit) to label the data provided by the category variable 
# Institutional type (CONTROL)

colleges <- colleges %>%
  mutate(public = ifelse(inst_type==1, 1, 0), nonprofit = ifelse(inst_type==2, 1, 0), forprofit = ifelse(inst_type==3, 1, 0))

# Create new dummy variables (<1000, 1000-4999, 5000-9999, 10000-19999, >20000) to label the data provided by the category variable 
# Institution size (INSTSIZE)

colleges <- colleges %>%
  mutate("size_1000_4999" = ifelse(inst_size==2, 1, 0), "size_5000_9999" = ifelse(inst_size==3, 1, 0),
         "size_10000_19999" = ifelse(inst_size==4, 1, 0), "size_over_20000" = ifelse(inst_size==5, 1, 0))


#saving new csv file with the variables we are going to work with
write.csv(colleges,'colleges.csv')

###############################################################################
# Getting geocode data
################################################################################

library(maps)
library(ggplot2)
library(ggmap)
library(geosphere)
library(mapproj)
library(sp)
library(rgdal)

# Registering google API
register_google(key = "AIzaSyAUU86MvAe9Q6xth24vPPT-zlunTtrgdKA", write = TRUE)

# Plotting USA map
usa <- get_map(location = "united states", zoom = 4, maptype = "terrain",
             source = "google", color = "color")

ggmap(usa)

# Extracting information from geocode

ipeds_geo <- colleges %>%
  mutate(address = paste(state, city, zip, sep = " ")) %>%
  mutate_geocode(address) %>%
  select(inst_name, address, longitude, latitude, lon, lat, avrg_earnings, inst_type,
         land_grant, hbcu, grad_offer, med_degree, hospital, urban, suburban, town,
         rural, avrg_net_price, pct_f_aid, n_phd_degree, n_mast_degree, n_bach_degree,
         n_assoc_degree, inst_size, inst_sector, pct_admit, tot_admit, in_state_tuition_fees,
         out_state_tuition_fees, in_state_tuition, out_state_tuition, tuition_plans,
         in_state_tuition_fees_room, out_state_tuition_fees_room)

#saving new csv file with geocode data
write.csv(ipeds_geo,'ipeds_geo.csv')

###############################################################################
# Plotting the data on maps
################################################################################

#############################################
# Creating new dataset "avrg_earnings_state"
############################################

# Calculating average earnings per state
avrg_earnings_state <- colleges %>% 
  group_by(state) %>% 
  summarize(average_earnings_state = mean(avrg_earnings))

# Changing from state abreviations to state names to match 
avrg_earnings_state$state <- state.name[match(avrg_earnings_state$state, state.abb)]

avrg_earnings_state$state[is.na(avrg_earnings_state$state)] <- c("DoDEA")

# Using data from the maps package to plot state differences
states_map <- as_tibble(map_data("state"))
states_map

# Average state earnings

avrg_earnings_state_map <- avrg_earnings_state %>%
  mutate(state = tolower(state)) %>%
  rename(region = state) %>%
  full_join(states_map)  %>%
  arrange(group, order)
avrg_earnings_state_map

ggplot(avrg_earnings_state_map, aes(x = long, y = lat, group = group, fill = average_earnings_state)) +
  geom_polygon(color = "black") +
  coord_map("polyconic") +
  scale_fill_gradient(
    low = "red",
    high = "green"
  )

#############################################
# Creating new dataset "avrg_cost_state"
############################################

# Cleaning the variable "in_state_tuition" to calculate the mean tuition cost per state
colSums(is.na(colleges))
clean_cost <- colleges[!is.na(colleges$in_state_tuition),]
head(clean_cost) 

# Calculating average earnings per state
avrg_cost_state <- clean_cost %>% 
  group_by(state) %>% 
  summarize(avrg_cost_state = mean(in_state_tuition))

# Changing from state abreviations to state names to match 
avrg_cost_state$state <- state.name[match(avrg_cost_state$state, state.abb)]

avrg_cost_state$state[is.na(avrg_cost_state$state)] <- c("DoDEA")

# Using data from the maps package to plot state differences
states_map <- as_tibble(map_data("state"))
states_map

# Average state cost

avrg_cost_state_map <- avrg_cost_state %>%
  mutate(state = tolower(state)) %>%
  rename(region = state) %>%
  full_join(states_map)  %>%
  arrange(group, order)
avrg_cost_state_map

ggplot(avrg_cost_state_map, aes(x = long, y = lat, group = group, fill = avrg_cost_state)) +
  geom_polygon(color = "black") +
  coord_map("polyconic") +
  scale_fill_gradient(
    low = "red",
    high = "green", name="Mean Earnings"
  )

#Maps by higher education institutions

#Map 1 (average earnings)

ipeds_geo <- read_csv("ipeds_geo.csv") 
head(ipeds_geo)

#subset of top earning universities
ipeds_subset1 <- subset(ipeds_geo, ipeds_geo$avrg_earnings > 45000)
ipeds_subset

#subset of lowest earning universities
ipeds_subset2 <- subset(ipeds_geo, ipeds_geo$avrg_earnings < 30000)
ipeds_subset2

#subset of universities in the middle
ipeds_subset3 <- subset(ipeds_geo, ipeds_geo$avrg_earnings > 30000 & ipeds_geo$avrg_earnings < 45000)
ipeds_subset3


usa <- get_map(location = "united states", zoom = 4, maptype = "terrain",
               source = "google", color = "color")

ggmap(usa)

ggmap(usa) + geom_jitter(data = ipeds_subset1, aes(x = lon, y = lat), 
                         color = "maroon", size = 2, height = 0.2, 
                         width = 0.2)

ggmap(usa) + geom_jitter(data = ipeds_subset2, aes(x = lon, y = lat), 
                         color = "navy", size = 2, height = 0.2, 
                         width = 0.2)

ggmap(usa) +  
  geom_jitter(data = ipeds_subset3, aes(x = lon, y = lat), 
              color = "orange", size = 1, height = 0.2, 
              width = 0.2) +
  geom_jitter(data = ipeds_subset1, aes(x = lon, y = lat), 
              color = "maroon", size = 1, height = 0.2, 
              width = 0.2) + 
  geom_jitter(data = ipeds_subset2, aes(x = lon, y = lat), 
              color = "navy", size = 1, height = 0.2, 
              width = 0.2) 

#Map 2 (tuition distribution)

ipeds_geo <- read_csv("ipeds_geo.csv") 
summary(ipeds_geo$in_state_tuition)

#subset of lowest charging universities
ipeds_subset4 <- subset(ipeds_geo, ipeds_geo$in_state_tuition < 15000)
ipeds_subset4

#subset of highest charging universities
ipeds_subset5 <- subset(ipeds_geo, ipeds_geo$in_state_tuition > 35000)
ipeds_subset5

#subset of universities in the middle
ipeds_subset6 <- subset(ipeds_geo, ipeds_geo$in_state_tuition > 15000 & ipeds_geo$in_state_tuition < 35000)
ipeds_subset6

ggmap(usa) +  
  geom_jitter(data = ipeds_subset6, aes(x = lon, y = lat), 
              color = "yellow", size = 1, height = 0.2, 
              width = 0.2) +
  geom_jitter(data = ipeds_subset4, aes(x = lon, y = lat), 
              color = "blue", size = 1, height = 0.2, 
              width = 0.2) + 
  geom_jitter(data = ipeds_subset5, aes(x = lon, y = lat), 
              color = "red", size = 1, height = 0.2, 
              width = 0.2) 

###############################################################################
# Multi linear regression
################################################################################

install.packages("plm")
library(plm)

#Opening college dataset
colleges <- read_csv("colleges.csv")

#Running multilinear regression models:

#1) Model 1: avrg_earnings/in_state_tuition

model1 <- lm(avrg_earnings ~ in_state_tuition, data = colleges)
summary(model1)

#2) Model 2: institutional characteristics + city characteristics

model2 <- lm(avrg_earnings ~ in_state_tuition + public +
                  nonprofit + land_grant + hbcu + hospital +  pct_admit + urban + suburban + 
                  town + grad_offer + med_degree + size_1000_4999 + size_5000_9999 + size_10000_19999 + 
                  size_over_20000, data = colleges)
summary(model2)

#3) Model 3: institutional characteristics + city characteristics + state fixed effects
model3 <- lm(avrg_earnings ~ in_state_tuition + public +
                  nonprofit + land_grant + hbcu + hospital + pct_admit + urban + suburban + 
                  town + grad_offer + med_degree + size_1000_4999 + size_5000_9999 + size_10000_19999 + 
                  size_over_20000 + as.factor(state), data = colleges)
summary(model3)


# Create regression table

install.packages("stargazer")
library(stargazer)

stargazer(model3, "Preferred regression mode", type = "text")
output <- stargazer(model1, model2, model3, type="text", out = "model.html")

stargazer(model1, model2, model3, title="Regression Results", 
          type="text", digits=2, align=TRUE, 
          dep.var.labels=c("Average Earnings By University"),
          covariate.labels=c("In-State Tuition", "Public status", 
                             "Nonprofit status", "Land grant institution",
                             "Historically Black inst.", "Has hospital", "% admitted", 
                             "Location: urban", "Location: suburban", "Location: town", 
                             "Offers grad. prgm.", "Offers med. deg.", "Size: 1k-5k", "Size: 5k-10k",
                             "Size: 10k-20k", "Size: 20k+"),
          add.lines=list(c("State fixed effects",
                           c(rep("No", 2), rep("Yes", 3)))))

capture.output({
  stargazer(all.models, type="latex", 
            out=file.path(PROJHOME, "Output", "tables", "1-internal-models-all.tex"),
            covariate.labels=coef.labs,
            dep.var.caption="Civil society regulatory environment (CSRE) in following year",
            dep.var.labels.include=FALSE,
            column.labels=names(all.models),
            omit="factor\\(year", no.space=TRUE,
            add.lines=extra.lines)
}, file="/dev/null")

#Ploting residuals vs fitted
plot(model3, las = 1)
