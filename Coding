################################################################################
# Introduction to Data Science
# EDUC 423
# Project
# Luis Grochocki, Gabriela Gavrila, David Song
###################################################################


###############################################################################
# Extracting variable earnings from secondary dataset
################################################################################

###############################################################################
# Set up
################################################################################

setwd("/Users/grochocki/Data Science/Project")

library(tidyverse)
library(RColorBrewer)


###Opening/Merging files

#Creating multmerge function
multmerge = function(mypath){
  filenames=list.files(path=mypath, full.names=TRUE)
  datalist = lapply(filenames, function(x){read.csv(file=x,header=T,stringsAsFactors=FALSE)})
  Reduce(function(x,y) {merge(x,y, all=TRUE)}, datalist)
}

#Merging files (academic year 2012-2013) - period was selected based on most recent available data on earnings
scorecard <- multmerge("/Users/grochocki/Data Science/Project/college_scorecard_files")

#Selecting the variables which will allow to merge the variable earnings to other datasets

select_project <- select(scorecard,
                         UNITID,# Inst id
                         CITY,
                         MN_EARN_WNE_P6) #mean earning year 6


#########################################################################
# Excluding N/A and "PrivacySuppressed" rows for variable MN_EARN_WNE_P6
#########################################################################

cleanearnings1 <- select_project[select_project$MN_EARN_WNE_P6 != "NULL", ]
cleanearnings2 <- cleanearnings1[cleanearnings1$MN_EARN_WNE_P6 != "PrivacySuppressed", ]

#########################################################################
# Creating new variable with the average college earnings (MN_EARN_WNE_P6) 
# for the academic year of 2012-2013 by campus site (UNITID)
#########################################################################

cleanearnings2$MN_EARN_WNE_P6 = as.numeric(as.character(cleanearnings2$MN_EARN_WNE_P6))

mean_earnings <- cleanearnings2 %>% 
  group_by(UNITID) %>% 
  summarize(average_earnings = mean(MN_EARN_WNE_P6))


###############################################################################
# Merge with IPEDS database variables
################################################################################

#Opening ipeds dataset
ipeds <- read_csv("2016_ipeds.csv")

#Merging files (mean_earnings)
colleges <- mean_earnings %>%
  inner_join(ipeds, by = c("UNITID" = "UnitID"))

#saving new csv file with the variables we are going to work with
write.csv(colleges,'colleges.csv')

  
###############################################################################
# Renaming columns
################################################################################

colnames(colleges) <- c("UNITID",
                          "avrg_earnings",
                          "inst_name",
                          "zip",
                          "state",
                          "city",
                          "street",
                          "latitude",
                          "longitude",
                          "inst_type",
                          "land_grant",
                          "hbcu",
                          "grad_offer",
                          "med_degree",
                          "hospital",
                          "urban",
                          "suburban",
                          "town",
                          "rural",
                          "avrg_net_price",
                          "pct_f_aid",
                          "n_phd_degree",
                          "n_mast_degree",
                          "n_bach_degree",
                          "n_assoc_degree",
                          "inst_size",
                          "inst_sector",
                          "pct_admit",
                          "tot_admit",
                          "in_state_tuition_fees",
                          "out_state_tuition_fees",
                          "in_state_tuition",
                          "out_state_tuition",
                          "tuition_plans",
                          "in_state_tuition_fees_room",
                          "out_state_tuition_fees_room")

# Create new dummy variables (public, nonprofit and forprofit) to label the data provided by the category variable 
# Institutional type (CONTROL)

colleges <- colleges %>%
  mutate(public = ifelse(inst_type==1, 1, 0), nonprofit = ifelse(inst_type==2, 1, 0), forprofit = ifelse(inst_type==3, 1, 0))


#saving new csv file with the variables we are going to work with
write.csv(colleges,'colleges.csv')

###############################################################################
# Getting geocode data
################################################################################

library(maps)
library(ggplot2)
library(ggmap)
library(geosphere)
library(mapproj)
library(sp)
library(rgdal)

# Registering google API
register_google(key = "AIzaSyAUU86MvAe9Q6xth24vPPT-zlunTtrgdKA", write = TRUE)

# Plotting USA map
usa <- get_map(location = "united states", zoom = 4, maptype = "terrain",
             source = "google", color = "color")

ggmap(usa)

# Extracting information from geocode

ipeds_geo <- colleges %>%
  mutate(address = paste(state, city, zip, sep = " ")) %>%
  mutate_geocode(address) %>%
  select(inst_name, address, longitude, latitude, lon, lat, avrg_earnings, inst_type,
         land_grant, hbcu, grad_offer, med_degree, hospital, urban, suburban, town,
         rural, avrg_net_price, pct_f_aid, n_phd_degree, n_mast_degree, n_bach_degree,
         n_assoc_degree, inst_size, inst_sector, pct_admit, tot_admit, in_state_tuition_fees,
         out_state_tuition_fees, in_state_tuition, out_state_tuition, tuition_plans,
         in_state_tuition_fees_room, out_state_tuition_fees_room)

#saving new csv file with geocode data
write.csv(ipeds_geo,'ipeds_geo.csv')

###############################################################################
# Plotting the data on maps
################################################################################

# Creating new dataset "avrg_earnings_state"
mean_earnings_state <- colleges %>% 
  group_by(state) %>% 
  summarize(average_earnings_state = mean(avrg_earnings))

mean_earnings_state$state <- state.name[match(mean_earnings_state$state, state.abb)]

mean_earnings_state$state[is.na(mean_earnings_state$state)] <- c("DoDEA")

# Using data from the maps package to plot state differences
states_map <- as_tibble(map_data("state"))
states_map

# Average state earnings

mean_earnings_state_map <- mean_earnings_state %>%
  mutate(state = tolower(state)) %>%
  rename(region = state) %>%
  full_join(states_map)  %>%
  arrange(group, order)
mean_earnings_state_map

ggplot(mean_earnings_state_map, aes(x = long, y = lat, group = group, fill = average_earnings_state)) +
  geom_polygon(color = "black") +
  coord_map("polyconic")

# Creating new dataset "mean_cost_state"

colSums(is.na(colleges))
clean_cost <- colleges[!is.na(colleges$in_state_tuition),]
head(clean_cost) 

mean_cost_state <- clean_cost %>% 
  group_by(state) %>% 
  summarize(mean_cost_state = mean(in_state_tuition))

mean_cost_state$state <- state.name[match(mean_cost_state$state, state.abb)]

mean_cost_state$state[is.na(mean_cost_state$state)] <- c("DoDEA")

# Using data from the maps package to plot state differences
states_map <- as_tibble(map_data("state"))
states_map

# Average state cost

mean_cost_state_map <- mean_cost_state %>%
  mutate(state = tolower(state)) %>%
  rename(region = state) %>%
  full_join(states_map)  %>%
  arrange(group, order)
mean_cost_state_map

ggplot(mean_cost_state_map, aes(x = long, y = lat, group = group, fill = mean_cost_state)) +
  geom_polygon(color = "black") +
  coord_map("polyconic")

# Opening geocode dataset
ipeds_geo <- read_csv("ipeds_geo.csv") 

# We have to work on the spatial coding, I got stuck
ggplot() + 
 geom_polygon(data = ipeds_geo, aes(x=lon, y=lat, group=group, fill=avrg_earnings), 
               col="white", size=0.2, alpha=.5) + 
  geom_path(data = ipeds_geo,  aes(x=lon, y=lat, group=group), colour = "gray15", size=.3) + 
  scale_fill_continuous(low="white", high="dodgerblue2", name ="Distribution of Institutions by Average Earnings") + 
  coord_map() + 
  theme_bw() + 
  theme(axis.title=element_blank(), 
        axis.text=element_blank(), 
        axis.ticks=element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        plot.title = element_text(size=14, face="bold", hjust=.5),
        legend.position="bottom")


###############################################################################
# Multi linear regression
################################################################################

#Opening college dataset
colleges <- read_csv("colleges.csv")

#Running multilinear regression models:

#1) Model 1: institutional characteristics
model1 <- lm(avrg_earnings ~ in_state_tuition + nonprofit + land_grant + hbcu + 
            grad_offer + med_degree + hospital + avrg_net_price + pct_f_aid + inst_size 
            + pct_admit, data = colleges)
summary(model1)

#2) Model 2: institutional characteristics + state characteristics
model2 <- lm(avrg_earnings ~ in_state_tuition + nonprofit + land_grant + hbcu + 
             grad_offer + med_degree + hospital + avrg_net_price + pct_f_aid + inst_size 
             + pct_admit + state, data = colleges)
summary(model2)

#3) Model 3: institutional characteristics + state characteristics + city characteristics
model3 <- lm(avrg_earnings ~ in_state_tuition + nonprofit + land_grant + hbcu + 
             grad_offer + med_degree + hospital + avrg_net_price + pct_f_aid + inst_size
             + pct_admit + state + urban + suburban + town, data = colleges)
summary(model3)

install.packages("stargazer")
library(stargazer)

stargazer(model3, "Preferred regression mode", type = "text")
output <- stargazer(model1, model2, model3, type="text", out = "model.html")

#Ploting residuals vs fitted
plot(model3, las = 1)
